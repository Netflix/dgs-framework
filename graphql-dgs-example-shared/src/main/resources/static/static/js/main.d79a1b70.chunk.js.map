{"version":3,"sources":["index.tsx"],"names":["httpLink","createHttpLink","uri","webSocketLink","WebSocketLink","client","ApolloClient","link","split","operation","operationName","cache","InMemoryCache","headers","resolvers","App","useQuery","gql","loading","error","data","movies","map","movie","title","director","__typename","nrOfExplosions","gory","SubscriptionPanel","useSubscription","stocks","name","price","ReactDOM","render","document","getElementById"],"mappings":"8wBAYA,IAAMA,EAAWC,yBAAe,CAACC,IAAI,kCAE/BC,EAAgB,IAAIC,IAAc,CACpCF,IAAK,sCAGHG,EAA8C,IAAIC,eAAa,CACjEC,KAAMC,iBAAM,SAACC,GACT,MAAmC,eAA5BA,EAAUC,gBAClBP,EAAeH,GAClBW,MAAO,IAAIC,gBACXC,QAAS,GACTC,UAAW,KAGTC,EAAgB,WAAO,IAAD,EACOC,mBAASC,cAAA,MAAjCC,EADiB,EACjBA,QAASC,EADQ,EACRA,MAAOC,EADC,EACDA,KAevB,OAAOF,EACH,2CACEC,EAAQ,6BAAMA,GACV,6BACE,sCACA,+BACI,4BACI,qCACA,wCACA,oCACA,0CACA,qCAEHC,EAAKC,OAAOC,KAAI,SAACC,GACd,OAAO,4BACH,4BAAKA,EAAMC,OACX,4BAAKD,EAAME,UACX,4BAAKF,EAAMG,YACX,4BAAKH,EAAMI,gBACX,4BAAKJ,EAAMK,KAAK,MAAM,WAKlC,6CACA,kBAACC,EAAD,QAYVA,EAA+B,WAAO,IAAD,EACRC,0BAAgBb,cAAA,KAO5C,IAPIG,EADgC,EAChCA,KADgC,EAC1BF,QAD0B,EACjBC,MAUtB,OAAOC,EAAK,6BAAMA,EAAKW,OAAOC,KAAlB,KAA2BZ,EAAKW,OAAOE,OAAa,+BAGpEC,IAASC,OACL,kBAAC,iBAAD,CAAgB9B,OAAQA,GACpB,kBAACU,EAAD,OAEJqB,SAASC,eAAe,W","file":"static/js/main.d79a1b70.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    ApolloClient,\n    NormalizedCacheObject,\n    ApolloProvider,\n    gql,\n    useQuery, InMemoryCache, split, createHttpLink, useSubscription\n} from '@apollo/client';\n\nimport {WebSocketLink} from \"@apollo/client/link/ws\";\n\nconst httpLink = createHttpLink({uri:'http://localhost:8080/graphql' })\n\nconst webSocketLink = new WebSocketLink({\n    uri: 'ws://localhost:8080/subscriptions'\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n    link: split((operation) => {\n        return operation.operationName === \"StockWatch\"\n    }, webSocketLink, httpLink),\n    cache: new InMemoryCache(),\n    headers: {},\n    resolvers: {},\n});\n\nconst App: React.FC = () => {\n    const {loading, error, data} = useQuery(gql`\n        {\n            movies {\n                title\n                director\n                __typename\n                ...on ActionMovie {\n                    nrOfExplosions\n                }\n                ...on ScaryMovie {\n                    gory\n                }\n            }\n        }`);\n\n    return loading ?\n        <div>Loading...</div>\n        : error ? <div>{error}</div>\n            : <div>\n                <h1>Movies</h1>\n                <table>\n                    <tr>\n                        <th>Title</th>\n                        <th>Director</th>\n                        <th>Type</th>\n                        <th>Explosions</th>\n                        <th>Gory</th>\n                    </tr>\n                    {data.movies.map((movie: Movie) => {\n                        return <tr>\n                            <td>{movie.title}</td>\n                            <td>{movie.director}</td>\n                            <td>{movie.__typename}</td>\n                            <td>{movie.nrOfExplosions}</td>\n                            <td>{movie.gory?\"yes\":\"no\"}</td>\n                        </tr>\n                    })}\n                </table>\n\n                <h1>Subscriptions</h1>\n                <SubscriptionPanel/>\n            </div>\n}\n\ntype Movie = {\n    title: String\n    director: String\n    __typename: String\n    nrOfExplosions: Number\n    gory: Boolean\n}\n\nconst SubscriptionPanel : React.FC = () => {\n    const {data, loading, error} = useSubscription(gql`\n        subscription StockWatch {\n            stocks {\n                name\n                price\n            }\n        }\n    `, {});\n\n\n    return data?<div>{data.stocks.name}: { data.stocks.price}</div>:<div/>\n}\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>,\n    document.getElementById('root'),\n);"],"sourceRoot":""}